import { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import katex from "katex";
import "katex/dist/katex.min.css";

// Composant pour les formules math√©matiques
function MathFormula({
  formula,
  className = "",
}: {
  formula: string;
  className?: string;
}) {
  useEffect(() => {
    const elements = document.querySelectorAll(".math-formula");
    elements.forEach((element) => {
      if (element.getAttribute("data-formula") === formula) {
        katex.render(formula, element as HTMLElement, {
          throwOnError: false,
          displayMode: true,
        });
      }
    });
  }, [formula]);

  return <div className={`math-formula ${className}`} data-formula={formula} />;
}

// Composant pour les sections pliables
function CollapsibleSection({
  title,
  children,
  icon,
  isOpen,
  onToggle,
  id,
}: {
  title: string;
  children: React.ReactNode;
  icon: string;
  isOpen: boolean;
  onToggle: () => void;
  id: string;
}) {
  return (
    <div
      id={id}
      className="mb-6 scroll-mt-20 overflow-hidden rounded-2xl border border-white/10 bg-white/5 backdrop-blur-sm transition-all duration-300 hover:bg-white/10"
    >
      <button
        onClick={onToggle}
        className="flex w-full items-center justify-between p-6 text-left transition-colors duration-200 hover:bg-white/5"
      >
        <div className="flex items-center space-x-3">
          <span className="text-2xl">{icon}</span>
          <h3 className="text-xl font-bold text-white">{title}</h3>
        </div>
        <div
          className={`transform transition-transform duration-300 ${isOpen ? "rotate-180" : ""}`}
        >
          <svg
            className="h-6 w-6 text-white"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M19 9l-7 7-7-7"
            />
          </svg>
        </div>
      </button>

      <div
        className={`transition-all duration-500 ${isOpen ? "max-h-[2000px] opacity-100" : "max-h-0 opacity-0"} overflow-hidden`}
      >
        <div className="p-6 pt-0">{children}</div>
      </div>
    </div>
  );
}

// Composant pour les cartes d'explication
function ConceptCard({
  title,
  content,
  example,
  color = "blue",
}: {
  title: string;
  content: string;
  example?: React.ReactNode;
  color?: string;
}) {
  const colorClasses = {
    blue: "from-blue-500/20 to-blue-600/20 border-blue-500/30",
    purple: "from-purple-500/20 to-purple-600/20 border-purple-500/30",
    green: "from-green-500/20 to-green-600/20 border-green-500/30",
    orange: "from-orange-500/20 to-orange-600/20 border-orange-500/30",
  };

  return (
    <div
      className={`bg-gradient-to-br ${colorClasses[color as keyof typeof colorClasses]} mb-4 rounded-xl border p-6 backdrop-blur-sm`}
    >
      <h4 className="mb-3 text-lg font-semibold text-white">{title}</h4>
      <p className="mb-4 leading-relaxed text-white/90">{content}</p>
      {example && <div className="rounded-lg bg-black/20 p-4">{example}</div>}
    </div>
  );
}

// Composant pour la grille visuelle
function VisualGrid({
  title,
  matrix,
  highlight = [],
}: {
  title: string;
  matrix: number[][];
  highlight?: number[];
}) {
  return (
    <div className="text-center">
      <h5 className="mb-2 text-sm font-medium text-white/80">{title}</h5>
      <div className="inline-block rounded-lg bg-black/30 p-3">
        <div
          className="grid gap-1"
          style={{
            gridTemplateColumns: `repeat(${matrix[0]?.length || 0}, 1fr)`,
          }}
        >
          {matrix.flat().map((value, index) => (
            <div
              key={index}
              className={`flex h-8 w-8 items-center justify-center rounded text-xs font-medium transition-all duration-300 ${
                highlight.includes(index)
                  ? "scale-110 bg-yellow-400 text-black shadow-lg"
                  : "bg-gray-700 text-white hover:bg-gray-600"
              }`}
            >
              {value}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

export default function Learn() {
  const [activeSection, setActiveSection] = useState(0);
  const [openSections, setOpenSections] = useState([true, false, false, false]);

  // Fonction pour naviguer vers une section
  const navigateToSection = (sectionIndex: number) => {
    setActiveSection(sectionIndex);

    // Ouvrir la section correspondante
    const newOpenSections = [...openSections];
    newOpenSections[sectionIndex] = true;
    setOpenSections(newOpenSections);

    // Scroll vers la section
    const sectionIds = [
      "section-intro",
      "section-convolution",
      "section-hyperparameters",
      "section-applications",
    ];
    const targetElement = document.getElementById(sectionIds[sectionIndex]);
    if (targetElement) {
      targetElement.scrollIntoView({
        behavior: "smooth",
        block: "start",
      });
    }
  };

  // Fonction pour toggler une section
  const toggleSection = (sectionIndex: number) => {
    const newOpenSections = [...openSections];
    newOpenSections[sectionIndex] = !newOpenSections[sectionIndex];
    setOpenSections(newOpenSections);
  };

  // Exemples de matrices pour la d√©monstration
  const inputMatrix = [
    [1, 2, 3, 0],
    [0, 1, 2, 3],
    [3, 0, 1, 2],
    [2, 3, 0, 1],
  ];

  const kernel = [
    [1, 0, -1],
    [2, 0, -2],
    [1, 0, -1],
  ];

  const outputMatrix = [
    [-4, -6],
    [4, 6],
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-purple-900">
      <div className="mx-auto max-w-6xl px-4 py-8">
        {/* En-t√™te de la page */}
        <div className="mb-12 text-center">
          <div className="mb-6 inline-block rounded-full bg-gradient-to-r from-blue-500/20 to-purple-500/20 px-6 py-2">
            <span className="font-medium text-blue-300">üìö Cours Complet</span>
          </div>
          <h1 className="mb-4 text-5xl font-bold text-white">
            R√©seaux de Neurones
            <span className="block bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
              Convolutionnels
            </span>
          </h1>
          <p className="mx-auto max-w-3xl text-xl text-white/80">
            Ma√Ætrisez les concepts fondamentaux des CNN et comprenez en
            profondeur le fonctionnement des couches de convolution.
          </p>
        </div>

        {/* Navigation rapide */}
        <div className="mb-8 rounded-2xl border border-white/10 bg-white/5 p-6 backdrop-blur-sm">
          <h2 className="mb-4 text-xl font-bold text-white">
            üó∫Ô∏è Plan du cours
          </h2>
          <div className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4">
            {[
              "üß† Introduction aux CNN",
              "üîç Couche de Convolution",
              "‚öôÔ∏è Hyperparam√®tres",
              "üéØ Applications Pratiques",
            ].map((item, index) => (
              <button
                key={index}
                onClick={() => navigateToSection(index)}
                className={`rounded-lg p-3 text-sm font-medium transition-all duration-300 hover:scale-105 ${
                  activeSection === index
                    ? "border border-blue-400/50 bg-blue-500/30 text-white shadow-lg"
                    : "bg-white/10 text-white/80 hover:bg-white/20"
                }`}
              >
                {item}
              </button>
            ))}
          </div>
        </div>

        {/* Section 1: Introduction aux CNN */}
        <CollapsibleSection
          title="Introduction aux R√©seaux de Neurones Convolutionnels"
          icon="üß†"
          isOpen={openSections[0]}
          onToggle={() => toggleSection(0)}
          id="section-intro"
        >
          <div className="space-y-6">
            <ConceptCard
              title="Qu'est-ce qu'un CNN ?"
              content="Les R√©seaux de Neurones Convolutionnels (CNN) sont une architecture de deep learning sp√©cialement con√ßue pour traiter des donn√©es qui ont une structure de grille, comme les images. Ils utilisent l'op√©ration de convolution pour d√©tecter des caract√©ristiques locales."
              color="blue"
            />

            <ConceptCard
              title="Pourquoi les CNN pour les images ?"
              content="Les images ont des propri√©t√©s spatiales importantes : les pixels voisins sont corr√©l√©s. Les CNN exploitent cette structure gr√¢ce √† la convolution, qui permet de d√©tecter des motifs locaux (contours, textures) tout en partageant les param√®tres."
              color="purple"
            />

            <div className="rounded-xl bg-white/5 p-6">
              <h4 className="mb-4 text-lg font-semibold text-white">
                üèóÔ∏è Architecture typique d'un CNN
              </h4>
              <div className="flex flex-wrap items-center justify-center gap-4 text-center">
                {[
                  { name: "Image d'entr√©e", color: "bg-green-500/30" },
                  { name: "Conv + ReLU", color: "bg-blue-500/30" },
                  { name: "Pooling", color: "bg-purple-500/30" },
                  { name: "Conv + ReLU", color: "bg-blue-500/30" },
                  { name: "Pooling", color: "bg-purple-500/30" },
                  { name: "Dense", color: "bg-orange-500/30" },
                  { name: "Sortie", color: "bg-red-500/30" },
                ].map((layer, index) => (
                  <div key={index} className="flex items-center">
                    <div
                      className={`${layer.color} rounded-lg px-4 py-2 text-sm font-medium text-white`}
                    >
                      {layer.name}
                    </div>
                    {index < 6 && <span className="mx-2 text-white/60">‚Üí</span>}
                  </div>
                ))}
              </div>
            </div>
          </div>
        </CollapsibleSection>

        {/* Section 2: Couche de Convolution */}
        <CollapsibleSection
          title="La Couche de Convolution en D√©tail"
          icon="üîç"
          isOpen={openSections[1]}
          onToggle={() => toggleSection(1)}
          id="section-convolution"
        >
          <div className="space-y-6">
            <ConceptCard
              title="Principe de la Convolution 2D"
              content="La convolution 2D consiste √† faire glisser un petit filtre (kernel) sur l'image d'entr√©e. √Ä chaque position, on calcule le produit scalaire entre le filtre et la r√©gion correspondante de l'image."
              color="blue"
            />

            {/* Formule math√©matique principale */}
            <div className="rounded-xl border border-blue-500/30 bg-gradient-to-r from-blue-500/10 to-purple-500/10 p-6">
              <h4 className="mb-4 text-lg font-semibold text-white">
                üìê Formule de la Convolution 2D
              </h4>
              <div className="text-center">
                <MathFormula
                  formula="Y[i,j] = \sum_{u=0}^{K_h-1} \sum_{v=0}^{K_w-1} X[i+u, j+v] \times K[u,v]"
                  className="text-lg text-white"
                />
              </div>
              <div className="mt-4 text-sm text-white/80">
                <p>
                  <strong>O√π :</strong>
                </p>
                <ul className="mt-2 list-inside list-disc space-y-1">
                  <li>
                    <code>Y[i,j]</code> : valeur de sortie √† la position (i,j)
                  </li>
                  <li>
                    <code>X[i+u, j+v]</code> : valeur d'entr√©e √† la position
                    (i+u, j+v)
                  </li>
                  <li>
                    <code>K[u,v]</code> : valeur du kernel √† la position (u,v)
                  </li>
                  <li>
                    <code>K_h, K_w</code> : hauteur et largeur du kernel
                  </li>
                </ul>
              </div>
            </div>

            {/* Exemple visuel */}
            <div className="rounded-xl bg-white/5 p-6">
              <h4 className="mb-6 text-center text-lg font-semibold text-white">
                üéØ Exemple Pratique : D√©tection de Contours Verticaux
              </h4>

              <div className="grid grid-cols-1 items-center gap-8 md:grid-cols-3">
                <VisualGrid title="Image d'entr√©e (4√ó4)" matrix={inputMatrix} />
                <VisualGrid title="Kernel Sobel (3√ó3)" matrix={kernel} />
                <VisualGrid title="Sortie (2√ó2)" matrix={outputMatrix} />
              </div>

              <div className="mt-6 rounded-lg bg-black/20 p-4">
                <h5 className="mb-2 font-medium text-white">
                  üí° Calcul d√©taill√© pour Y[0,0] :
                </h5>
                <MathFormula
                  formula="Y[0,0] = 1√ó1 + 2√ó0 + 3√ó(-1) + 0√ó2 + 1√ó0 + 2√ó(-2) + 3√ó1 + 0√ó0 + 1√ó(-1) = -4"
                  className="text-white/90"
                />
              </div>
            </div>

            <ConceptCard
              title="Intuition : Que fait la convolution ?"
              content="La convolution permet de d√©tecter des caract√©ristiques sp√©cifiques dans l'image. Chaque kernel est sp√©cialis√© dans la d√©tection d'un type de motif : contours, textures, formes, etc. Plus le produit scalaire est √©lev√©, plus la caract√©ristique est pr√©sente."
              color="green"
            />
          </div>
        </CollapsibleSection>

        {/* Section 3: Hyperparam√®tres */}
        <CollapsibleSection
          title="Hyperparam√®tres de la Convolution"
          icon="‚öôÔ∏è"
          isOpen={openSections[2]}
          onToggle={() => toggleSection(2)}
          id="section-hyperparameters"
        >
          <div className="space-y-6">
            {/* Padding */}
            <ConceptCard
              title="üî≤ Padding (Rembourrage)"
              content="Le padding consiste √† ajouter des z√©ros (ou d'autres valeurs) autour de l'image d'entr√©e pour contr√¥ler la taille de sortie et pr√©server l'information des bords."
              color="blue"
              example={
                <div>
                  <p className="mb-2 text-white/90">
                    <strong>Types de padding :</strong>
                  </p>
                  <ul className="space-y-1 text-sm text-white/80">
                    <li>
                      ‚Ä¢ <strong>Valid</strong> : Aucun padding (sortie plus
                      petite)
                    </li>
                    <li>
                      ‚Ä¢ <strong>Same</strong> : Padding pour garder la m√™me
                      taille
                    </li>
                    <li>
                      ‚Ä¢ <strong>Custom</strong> : Valeur de padding
                      personnalis√©e
                    </li>
                  </ul>
                </div>
              }
            />

            {/* Stride */}
            <ConceptCard
              title="üëü Stride (Pas)"
              content="Le stride d√©finit de combien de pixels le kernel se d√©place √† chaque √©tape. Un stride de 1 signifie qu'on se d√©place d'un pixel, un stride de 2 qu'on saute un pixel sur deux."
              color="purple"
              example={
                <div>
                  <p className="mb-2 text-white/90">
                    <strong>Impact du stride :</strong>
                  </p>
                  <ul className="space-y-1 text-sm text-white/80">
                    <li>‚Ä¢ Stride = 1 : Convolution standard</li>
                    <li>‚Ä¢ Stride {">"}1 : R√©duction de la taille de sortie</li>
                    <li>
                      ‚Ä¢ Plus le stride est grand, plus la sortie est petite
                    </li>
                  </ul>
                </div>
              }
            />

            {/* Taille de sortie */}
            <div className="rounded-xl border border-orange-500/30 bg-gradient-to-r from-orange-500/10 to-red-500/10 p-6">
              <h4 className="mb-4 text-lg font-semibold text-white">
                üìè Calcul de la Taille de Sortie
              </h4>
              <div className="mb-4 text-center">
                <MathFormula
                  formula="H_{out} = \lfloor \frac{H_{in} + 2P - K_h}{S} \rfloor + 1"
                  className="text-white"
                />
                <MathFormula
                  formula="W_{out} = \lfloor \frac{W_{in} + 2P - K_w}{S} \rfloor + 1"
                  className="text-white"
                />
              </div>
              <div className="text-sm text-white/80">
                <p>
                  <strong>O√π :</strong>
                </p>
                <ul className="mt-2 list-inside list-disc space-y-1">
                  <li>
                    <code>H_in, W_in</code> : dimensions d'entr√©e
                  </li>
                  <li>
                    <code>P</code> : padding
                  </li>
                  <li>
                    <code>K_h, K_w</code> : taille du kernel
                  </li>
                  <li>
                    <code>S</code> : stride
                  </li>
                </ul>
              </div>
            </div>

            {/* Dilation */}
            <ConceptCard
              title="üï≥Ô∏è Dilation"
              content="La dilation permet d'√©largir le champ r√©ceptif du kernel en ins√©rant des espaces entre ses √©l√©ments. Cela permet de capturer des informations sur une zone plus large sans augmenter le nombre de param√®tres."
              color="green"
              example={
                <div>
                  <p className="mb-2 text-white/90">
                    <strong>Avantages de la dilation :</strong>
                  </p>
                  <ul className="space-y-1 text-sm text-white/80">
                    <li>‚Ä¢ Champ r√©ceptif plus large</li>
                    <li>‚Ä¢ Pas d'augmentation des param√®tres</li>
                    <li>‚Ä¢ Utile pour la segmentation</li>
                  </ul>
                </div>
              }
            />
          </div>
        </CollapsibleSection>

        {/* Section 4: Applications */}
        <CollapsibleSection
          title="Applications Pratiques et Bonnes Pratiques"
          icon="üéØ"
          isOpen={openSections[3]}
          onToggle={() => toggleSection(3)}
          id="section-applications"
        >
          <div className="space-y-6">
            <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
              <ConceptCard
                title="üé® Types de Filtres Courants"
                content="Diff√©rents types de kernels permettent de d√©tecter diff√©rentes caract√©ristiques dans les images."
                color="blue"
                example={
                  <div className="space-y-2">
                    <p className="text-sm text-white/90">
                      <strong>Sobel :</strong> D√©tection de contours
                    </p>
                    <p className="text-sm text-white/90">
                      <strong>Gaussien :</strong> Lissage/flou
                    </p>
                    <p className="text-sm text-white/90">
                      <strong>Laplacien :</strong> D√©tection de bords
                    </p>
                    <p className="text-sm text-white/90">
                      <strong>Prewitt :</strong> D√©tection de contours
                    </p>
                  </div>
                }
              />

              <ConceptCard
                title="üöÄ Optimisations"
                content="Techniques pour am√©liorer les performances et la pr√©cision des CNN."
                color="purple"
                example={
                  <div className="space-y-2">
                    <p className="text-sm text-white/90">
                      <strong>Batch Normalization :</strong> Stabilit√©
                    </p>
                    <p className="text-sm text-white/90">
                      <strong>Dropout :</strong> R√©gularisation
                    </p>
                    <p className="text-sm text-white/90">
                      <strong>Data Augmentation :</strong> Diversit√©
                    </p>
                    <p className="text-sm text-white/90">
                      <strong>Transfer Learning :</strong> R√©utilisation
                    </p>
                  </div>
                }
              />
            </div>

            <ConceptCard
              title="üí° Conseils Pratiques"
              content="Pour bien utiliser les couches de convolution dans vos projets."
              color="orange"
              example={
                <div className="space-y-2 text-sm text-white/90">
                  <p>
                    ‚Ä¢ <strong>Commencez simple :</strong> Kernels 3√ó3, stride 1
                  </p>
                  <p>
                    ‚Ä¢ <strong>Augmentez progressivement :</strong> Nombre de
                    filtres
                  </p>
                  <p>
                    ‚Ä¢ <strong>Utilisez le padding "same" :</strong> Pour garder
                    les dimensions
                  </p>
                  <p>
                    ‚Ä¢ <strong>Alternez conv et pooling :</strong> Pour r√©duire
                    la dimensionnalit√©
                  </p>
                  <p>
                    ‚Ä¢ <strong>Visualisez les feature maps :</strong> Pour
                    comprendre ce qui est appris
                  </p>
                </div>
              }
            />
          </div>
        </CollapsibleSection>

        {/* Call to Action */}
        <div className="mt-12 text-center">
          <div className="rounded-3xl border border-white/20 bg-gradient-to-r from-blue-500/20 to-purple-500/20 p-8 backdrop-blur-sm">
            <h2 className="mb-4 text-3xl font-bold text-white">
              üéÆ Pr√™t √† exp√©rimenter ?
            </h2>
            <p className="mb-6 text-xl text-white/80">
              Maintenant que vous comprenez la th√©orie, passez √† la pratique !
            </p>
            <div className="flex flex-col justify-center gap-4 sm:flex-row">
              <Link
                to="/demo"
                className="rounded-full bg-gradient-to-r from-blue-500 to-purple-600 px-8 py-4 text-lg font-semibold text-white transition-all duration-300 hover:scale-105 hover:shadow-xl"
              >
                üöÄ Essayer la D√©mo Interactive
              </Link>
              <Link
                to="/quiz"
                className="rounded-full border-2 border-white/30 px-8 py-4 text-lg font-semibold text-white transition-all duration-300 hover:bg-white/10"
              >
                üß† Tester mes Connaissances
              </Link>
            </div>
          </div>
        </div>

        {/* Glossaire rapide */}
        <div className="mt-12 rounded-2xl border border-white/10 bg-white/5 p-6 backdrop-blur-sm">
          <h2 className="mb-6 text-2xl font-bold text-white">
            üìñ Glossaire Rapide
          </h2>
          <div className="grid grid-cols-1 gap-4 text-sm md:grid-cols-2">
            {[
              {
                term: "Feature Map",
                def: "R√©sultat de l'application d'un filtre sur l'entr√©e",
              },
              {
                term: "Kernel/Filtre",
                def: "Petite matrice de poids qui glisse sur l'image",
              },
              {
                term: "Champ R√©ceptif",
                def: "Zone de l'entr√©e qui influence une sortie",
              },
              {
                term: "Param√®tres Partag√©s",
                def: "M√™me kernel utilis√© sur toute l'image",
              },
              {
                term: "Invariance Translation",
                def: "M√™me r√©ponse peu importe la position",
              },
              {
                term: "Backpropagation",
                def: "Algorithme d'entra√Ænement des r√©seaux",
              },
            ].map((item, index) => (
              <div key={index} className="rounded-lg bg-white/5 p-3">
                <div className="font-semibold text-blue-300">{item.term}</div>
                <div className="text-white/80">{item.def}</div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}
